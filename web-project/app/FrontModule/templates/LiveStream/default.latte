{block content}

<div class="container-fluid video-player-bg">
    <div class="container">
        <div class="video-player">
            <div class="column col-md-10 col-md-offset-1">

                <div class="embed-responsive embed-responsive-16by9">
                    <div id="player"></div>
                </div>

            </div>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="row">
                <div class="col-md-6 col-xl-4">
                    
                </div>
                <div class="col-md-8 col-md-offset-2 col-xl-4">
                    <p id="playerTags" class="tags text-center">
                        
                    </p>
                </div>
                <hr class="visible-sm visible-xs">
            </div>
            <br>
        </div>
    </div>

</div>

{/block}

{block pageScripts}

<script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '720',
          width: '100%',
          videoId: {$values['youtube_link']},
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>
{/block}