<script>
    
    var player;
    var lastSavedTime;

    $('document').ready(function() {
        
        $('#share-fb').click(function() {
           shareToFB(); 
        });
        
        $('#share-google-plus').click(function() {
           shareToGooglePlus(); 
        });
        
        $('#share-link').click(function() {
           shareLink({_frontend.basic.share}); 
        });
        
        $('#video-time').click(function() {
            player.pause();
            $(this).select();
        });

        $('#playerTags a').tagcloud({
            size: {
                start: 12,
                end: 25,
                unit: 'px'
            },
            color: {
                start: "#ffffff",
                end: "#ffffff"
            }
        });
        
        var video = videojs('video', {
                plugins: {
                    videoJsResolutionSwitcher: {
                        
                    },
                    {if isset($video['ass'])}
                        ass: {
                            src: '{$video['ass']|noescape}',
                            rate: 1,
                            videoWidth: 1280,
                            videoHeight: 720
                        }
                    {/if}
                }
            }).ready(function(){
                player = this;

                var hash = window.location.hash.replace('#&', '').replace('#t=', '').replace('#', '');
                if (hash !== 0 && hash !== '' && hash !== undefined && hash !== null && hash != 'autoplay') {
                    player.currentTime(hash);
                } else {
                    getSavedVideoTime(function(time) {
                        player.currentTime(time);
                    });
                }

                player.on('pause', function() {
                    saveVideoTime(player.currentTime());
                    savePlayerVolume(player.volume().toString().substr(0,5));
                });

                player.on('play', function() {
                    saveVideoTime(player.currentTime());
                    savePlayerVolume(player.volume().toString().substr(0,5));
                });

                if (getSavedPlayerVolume() !== undefined) {
                    player.volume(getSavedPlayerVolume());
                }

                if (window.location.hash === "#autoplay") {
                    player.play();
                    window.location.hash = "&";
                }

                player.currentResolution('original');

                video.markers({
                    markerStyle: {
                        'width':'4px',
                        'background-color': 'orange'
                    },
                    breakOverlay:{
                        display: true,
                        displayTime: 5,
                        style:{
                            'width': 'auto',
                            'max-width': '40%',
                            'max-height': 'calc(100% - 50px)',
                            'position': 'absolute',
                            'top': '12px',
                            'right': '12px',
                            'background-color': 'rgba(43, 51, 63, 0.7)',
                            'color': 'white',
                            'font-size': '17px'
                        },
                        text: function(marker) {
                            return '<div class="note-overlay">' +
                                {if isset($frontUser) && isset($frontUser['fromFB'])}
                                    '<img class="note-avatar" src="http://graph.facebook.com/{$frontUser['fromFB']['id']|noescape}/picture?type=square&width=150&height=150" />' +
                                {/if}
                                {if isset($frontUser)}
                                    '<span class="note-user">{$frontUser['fromDB']['firstname']|noescape}:</span>' +
                                {/if}
                                '<span class="note">' + marker.text + '</span>' +
                                '</div>';
                        }
                    },
                    markerTip:{
                        display: true,
                        text: function(marker) {
                            return marker.text;
                        },
                        time: function(marker) {
                            return marker.time;
                        }
                    },
                    markers: [
                        { time: 9.5, text: "this" }
                    ]
                });
            
            });

        setInterval(function() {
            saveVideoTime(player.currentTime());
            savePlayerVolume(player.volume().toString().substr(0,5));
        }, 10 * 1000);

        setInterval(function() {
            updateShareInTime(player);
        }, 1000);

        $(window).unload(function(){
            saveVideoTime(player.currentTime());
            savePlayerVolume(player.volume().toString().substr(0,5));
        });

        function addNote(note, time) {
            video.markers.add([{ time: time, text: note}]);
            $('#notes-list').append('<div class="note">' +
                    convertSecondsToDigitalClock(time).clock + " " + note +
                '</div>');
        }

        $('.add-note').click(function() {
            bootbox.prompt({_frontend.basic.add_note}, function(result){
                if (result != null && result.trim().length != 0) {
                    addNote(result, player.currentTime());
                }
            });
        });

        $('.remove-note').click(function(e) {
            console.log(e);
        });

        adjustSidePanel();
    });

    $(window).resize(function() {
        adjustSidePanel();
    });

    function convertSecondsToDigitalClock(ms) {
        hours = Math.floor(ms / 3600), // 1 Hour = 36000 Milliseconds
            minutes = Math.floor((ms % 3600) / 60), // 1 Minutes = 60000 Milliseconds
            seconds = Math.floor((ms % 360) % 60) // 1 Second = 1000 Milliseconds
        return {
            hours : hours,
            minutes : minutes,
            seconds : seconds,
            clock : hours + ":" + minutes + ":" + seconds
        };
    }
    
    function videoJSAddCustomButton(player, videojs, name, callback) {
        var videoJsButtonClass = videojs.getComponent('Button');
        var concreteButtonClass = videojs.extend(videoJsButtonClass, {

          // The `init()` method will also work for constructor logic here, but it is 
          // deprecated. If you provide an `init()` method, it will override the
          // `constructor()` method!
          constructor: function() {
            videoJsButtonClass.call(this, player);
          }, // notice the comma

          handleClick: function(){
            callback();
          }
        });

        var concreteButtonInstance = player.controlBar.addChild(new concreteButtonClass());
            concreteButtonInstance.addClass("vjs-" + name);
    }

    function saveVideoTime(time) {
        {if $user->isLoggedIn()}

            if (lastSavedTime != time) {
                $.ajax({
                    type: "POST",
                    data: {
                        time: time,
                        token: {$frontUser['fromDB']['token']}
                    },
                    url: "/api/v2/video/" + {$videoRaw['hash']} +"/save-time/"
                }).success(function (response) {
                    lastSavedTime = time;
                    if (response.status != "ok") {
                        console.log("saving video time: " + response.status);
                    }
                });
            }

        {/if}
    }

    function getSavedVideoTime(callback) {
        {if $user->isLoggedIn()}
            $.ajax({
                type: "POST",
                data: {
                    token: {$frontUser['fromDB']['token']}
                },
                url: "/api/v2/video/" + {$videoRaw['hash']} + "/get-time/"
            }).success(function(response) {
                if (response.status == "ok") {
                    callback(response.status.time);
                } else {
                    console.log("error getting video time: " + response.status);
                }
            });
        {/if}
    }

    function savePlayerVolume(volume) {
        setCookie('player_volume', volume);
    }

    function getSavedPlayerVolume() {
        return getCookie('player_volume');
    }

    function adjustSidePanel() {
        var height = $('#video').height() - $('.sidepanel .nav-tabs').outerHeight();
        $('.notes').height(height);
        $('.similar-videos').height(height);
    }
    
    function updateShareInTime() {
        var input = $('#video-time');
        var url = location.href.replace(location.hash,"") + "#t=" + parseInt(player.currentTime());
        
        if (input.val() === '' || !player.paused()) {
            input.val(url);
        }
    }
 

</script>